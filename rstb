#!/bin/bash

# Rstb
# ====

# :description:
#   A blog manager implemented in bash.

# General settings
# ----------------

sext='rst';
bext='html';
dfmt='%Y/%m/%d';


# Shell options
# -------------
shopt -s nullglob;


# General functions
# -----------------

warn()  { printf '%s: %s\n' "${BASH_SOURCE##*/}" "$1" >&2; }
die()   { local st="$?"; warn "$1"; exit "$st"; }

# Sane defaults
# -------------

# These should be overriden in the rstbrc file.
editor()    { "${EDITOR:-vi}" "$1"; }
builder()   { rst2html "$1"; }
viewer()    { xdg-open "$1"; }
publisher() {
    local file title;
    file=$1;
    title=$2;

    env MAILX_HEAD='Content-Type: text/html' \ 
        MAILRC=/dev/null \
            mailx -n -s "$title" "$mail_to" < "$file"
}


# ------------------------------------------------------------ 
#
# Rstb functions
# --------------

rstb_checkfile()    {
    local arg;

    for arg; do
        if ! [[ -r $arg ]]; then
            die "unreadable file: $arg";
        fi;
    done
}

# FIXME
rstb_title()        { rstb_checkfile "$1" && awk 'NR==1' "$1"; }

rstb_new()          {
    local title post base_directory last_post;
    local -a posts;

    title=$1;

    # Sanity checks.
    if ! [[ $title ]]; then
        die 'Please provide $title'
    fi

    # Make the base directory.
    base_directory=$posts_directory/$(date "+$dfmt");
    if ! mkdir -p "$base_directory"; then 
        die 'mkdir -p $base_directory'
    fi

    # Increase the counter.
    posts=("$base_directory"/*);
    last_post=${posts[@]: -1};
    last_post=${last_post##*/}
    post=$((last_post+1))

    # Make the directory for the post & touch the file.
    mkdir -p "$base_directory/$post";
    post=$base_directory/$post/$title.$sext;

    if ! rstb_edit "$post" || ! [[ -r $post ]]; then
        rmdir "${post%/*}" "$base_directory" >/dev/null 2>&1
    fi
}

rstb_edit()         { editor "$1"; }

rstb_build()        {
    local file;
    file=$1

    if rstb_checkfile "$file"; then
        builder "$file" > "${file%.*}.$bext"
    fi
}

rstb_view()         {
    local file
    file=${1%.*}.$bext

    if rstb_checkfile "$file"; then
        viewer "$file"
    fi
}

rstb_publish()      {
    local src file;
    src=$1
    file=${1%.*}.$bext

    if rstb_checkfile "$src" "$file"; then
        publisher "$file" "$(rstb_title "$src")";
    fi
}

# FIXME
rstb_cmd() {
    local file directory

    file=$1
    shift;

    if file=$(rstb_similar "$file"); then
        directory=${file%/*}
    else
        directory=$posts_directory
    fi

    builtin cd "$directory" || die 'abc';
    "$@"
}


# ------------------------------------------------------------
#
# Main code
# ---------

# Available commands
# ++++++++++++++++++

commands=(
    new
    edit
    build
    view
    publish
    cmd 
)

command=$1;
shift;


# Configuration
# +++++++++++++

configuration_files=(
    /etc/rstbrc
    /usr/local/etc/rstbrc
    ~/.rstbrc
)
for configuration_file in "${configuration_files[@]}"; do
    if [[ -r $configuration_file ]]; then
        . "$configuration_file"
    fi
done

[[ -d $posts_directory && -w $posts_directory ]] || {
    die 'make sure $posts_directory is set and valid'
}


# Dependencies
# ++++++++++++

declare -a dependencies=(
    'date'          # Coreutils
    'rst2html'      # Docutils
    'touch'
    'mkdir'
    'rmdir'
    'mailx'
)
for dependency in "${dependencies[@]}"; do
    if ! type "$dependency" >/dev/null 2>&1; then
        die "missing dependency: $dependency";
    fi
done


# Execution of command
# ++++++++++++++++++++

# Fail if the command doesn't exist
command_exists=
for have_command in "${commands[@]}"; do
    if [[ $have_command = "$command" ]]; then
        command_exists=1
        break;
    fi
done

if [[ $command_exists ]]; then
    rstb_"$command" "$@";
else
    die 'please provide a valid command';
fi
